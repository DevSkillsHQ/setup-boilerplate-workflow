name: Setup boilerplate

on:
  workflow_call:
    inputs:
      boilerplate:
        type: string
        description: Name of a supported boilerplate
        required: true
      branch-name:
        type: string
        description: Branch to use for boilerplate setup
        default: development
        required: true

jobs:
  setup-boilerplate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Create or checkout branch
        run: |
          branch_name=${{ github.event.inputs.branch-name }}
          git fetch --all
          git checkout $branch_name || git checkout -b $branch_name
      - name: Setup boilerplate
        run: |
          branch_name=${{ github.event.inputs.branch-name }}
          boilerplate=${{ github.event.inputs.boilerplate }}
          git clone https://github.com/DevSkillsHQ/$boilerplate.git
          
          # Parse "build" and "start" scripts from the boilerplate's package.json and write it to a new JSON file
          jq '{scripts: {build: .scripts.build, start: .scripts.start}}' $boilerplate/package.json > scripts.json

          # Merge the existing package.json with the scripts.json
          jq -s '.[0] * .[1]' package.json scripts.json > package.tmp.json && mv package.tmp.json package.json

          # Remove the temporary scripts.json file
          rm scripts.json

          cp -r $boilerplate/app* .
          
          # Fetch apiUrl from cypress.json or cypress.config.js
          if [ -f "$boilerplate/cypress.json" ]; then
            apiUrl=$(jq -r '.env.apiUrl' $boilerplate/cypress.json)
          elif [ -f "$boilerplate/cypress.config.js" ]; then
            apiUrl=$(node -e "\
              const fs = require('fs');\
              const fileContent = fs.readFileSync('./$boilerplate/cypress.config.js', 'utf-8');\
              const match = fileContent.match(/apiUrl:\\s?'([^']*)'/);\
              if (match) console.log(match[1]);\
            ")
          else
            echo "Neither cypress.json nor cypress.config.js was found in the $boilerplate directory"
            exit 1
          fi

          # Set apiUrl in cypress.json or cypress.config.js of the current directory
          if [ -f "cypress.json" ]; then
            jq ".env.apiUrl |= \"$apiUrl\"" cypress.json > cypress.temp.json && mv cypress.temp.json cypress.json
          elif [ -f "cypress.config.js" ]; then
            node -e "\
              const fs = require('fs');\
              let fileContent = fs.readFileSync('./cypress.config.js', 'utf-8');\
              fileContent = fileContent.replace(/(apiUrl:\\s?')[^']*'/, \`$1${apiUrl}'\`);\
              fs.writeFileSync('./cypress.config.js', fileContent);\
            "
          else
            echo "Neither cypress.json nor cypress.config.js was found in the current directory"
            exit 1
          fi
          
          git add cypress.*
          
          rm -rf $boilerplate
          npm i
          git add package.json app*
          
          git config --global user.email "setup-boilerplate@example.com"
          git config --global user.name "Setup boilerplate"
          git commit -m "Initialize boilerplate $boilerplate"
          git push origin $branch_name
      - name: Error summary
        if: failure()
        run: |
          echo '## Failed to import ${{ github.event.inputs.boilerplate }}' >> $GITHUB_STEP_SUMMARY
          echo 'Make sure ${{ github.event.inputs.boilerplate }} is a valid boilerplate name.' >> $GITHUB_STEP_SUMMARY
          echo 'Check https://help.alvalabs.io/en/articles/7972852-supported-coding-test-boilerplates' >> $GITHUB_STEP_SUMMARY
      - name: Success summary
        if: success()
        run: |
          echo '## Successfully imported ${{ github.event.inputs.boilerplate }}' >> $GITHUB_STEP_SUMMARY
          echo 'Run `git checkout ${{ github.event.inputs.branch-name }}` to start working on the challenge.' >> $GITHUB_STEP_SUMMARY
